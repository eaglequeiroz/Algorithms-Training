package br.com.eaglequeiroz.projecteuler;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * @author Igor Queiroz
 * This Algorithm is responsible for finding the first triangle number to have over 500 divisors
 *
 * ******
 *The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * ******
 */
public class _12_highlyDivisibleTriangularNumber {


    public static void main(String[] args) {
        System.out.println("The Triangle number to have over 500 divisors is: " + findTriangleNumberWithOver500Divisors());
    }

    private static long findTriangleNumberWithOver500Divisors() {
        int divisors = 0;
        long triangleNumber = 0;
        for (long i = 1; divisors <= 500; i++){
            divisors = 0;
            triangleNumber += i;
            for (long j = 1; j <= triangleNumber; j++ ){
                if(triangleNumber % j == 0){
                    divisors++;
                }
                if (divisors == 500){
                    return triangleNumber;
                }
            }
        }
        return triangleNumber;
    }
}
